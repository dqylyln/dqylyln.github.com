<?xml version="1.0"?>
<rss version="2.0">  <channel>
    <title>dqylyln树梅派的空间</title>
    <link>http://dqy.me</link>
    <pubDate>11 Sep 13 14:02 CST</pubDate>
    <item>
      <title>利用xively监控Raspberry Pi的Load和温度</title>
      <link>http://dqy.me/2013/use-cosm.html</link>
      <pubDate>2013-04-22 12:00:00 +0800</pubDate>
      <description>&lt;h1&gt;前言&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;在RaspberryPi搭建博客后发现个问题，就是我如何能够知道RaspberryPi的一些运行信息，比如CPULoad或者温度。初步想法是利用图表形式汇总信息，然后&#xA;通过网页图表展示。该方案主要有以下几个关键点：&lt;/p&gt;&#xA;&#xA;&lt;p&gt;1.打点，将收集的信息进行打点，通常是将数据写入文件。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;2.收集打点数据文件，然后分析出数据内容。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;3.根据分析结果，进行画图用于展示。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;而针对以上几点来看让Raspberry Pi去打点没什么问题，收集打点数据分析内容，利用分析结果画图展示这个两条如果让RaspberryPi来做的话有些浪费本地资源，&#xA;本身Raspberry Pi的资源就有限如CPU。所以如果可以将打点数据上传到第三方的服务中，让第三方分析并且画图展示岂不是更好。所以，参考了一粟同学的方案。&#xA;利用&lt;a href=&#34;https://xively.com&#34;&gt;xively.com&lt;/a&gt; 提供的服务来进行数据收集和描点画图。&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;xively账户准备&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;1.&lt;a href=&#34;https://xively.com/signup/&#34;&gt;注册账户&lt;/a&gt;，因为需要邮箱收取激活邮件，所以需要填写正确的邮件地址。（激活邮件到达比较慢，至少我是等了半天才收到激活邮件）&lt;/p&gt;&#xA;&#xA;&lt;p&gt;2.添加一个设备&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;菜单上develop， 然后点击Add Device&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;http://cdntest.aliyun.com/faxianla/wood/mt1368624872171.png&#34; width=&#34;600&#34; height=&#34;600&#34;/&gt;&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;提交后会得到Feed ID，Feed URL，API Endpoint相关信息，后续API使用要用。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;http://cdntest.aliyun.com/faxianla/wood/mt1368625058391.png&#34; width=&#34;600&#34; height=&#34;600&#34;/&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;*设置API的密钥 在API Keys选择添加一个API,设置属性Read，Create，Update，Delete，标签随便命名。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;http://cdntest.aliyun.com/faxianla/wood/mt1368625265417.png&#34; width=&#34;600&#34; height=&#34;600&#34;/&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;到此为止你的FEED相关需要的东西经创建好了，有空的话可以看下创建成功页面下的一些示范API的连接，支持JAVA，CURL等。这里主要用CURL&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;xively http API&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;上面已经创建好了数据的FEED，剩下的就是向这个FEED里提交数据了，这里用的是&lt;a href=&#34;https://xively.com/dev/docs/api/data/write/multiple_datapoints_to_multiple_data_streams&#34;&gt;CURL API详情&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;1.数据格式（JSON）&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &amp;quot;datastreams&amp;quot;: [&#xA;        {&#xA;            &amp;quot;id&amp;quot;: &amp;quot;load&amp;quot;,&#xA;            &amp;quot;current_value&amp;quot;: &amp;quot;9.00&amp;quot;&#xA;        },&#xA;        {&#xA;            &amp;quot;id&amp;quot;: &amp;quot;temp&amp;quot;,&#xA;            &amp;quot;current_value&amp;quot;: &amp;quot;89.15&amp;quot;&#xA;        }&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;每条线的点的数据结构是KEY-VALUE形式，其中id代表是这个点属于线的ID(自己定义有意义的名称 如Load)，current_value是指这个点的VALUE。&#xA;推荐一个在线的JOSN格式化和校验工具 &lt;a href=&#34;http://www.jsoneditoronline.org/&#34;&gt;jsoneditoronline&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;2.提交数据&lt;/p&gt;&#xA;&#xA;&lt;p&gt;cosm提供了HTTP的API方式&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;URL: https://api.xively.com/v2/feeds/${FEED_ID}?timezone=+8&#xA;&#xA;HEAD：需要增加X-ApiKey：${apiKey}&#xA;&#xA;putData:上面的JSON数据&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h1&gt;浏览器调试&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;利用chrome的一个插件叫&lt;a href=&#34;https://chrome.google.com/webstore/detail/dev-http-client/aejoelaoggembcahagimdiliamlcdmfm/details?utm_source=chrome-ntp-icon&#34;&gt;Dev Http Client&lt;/a&gt;, 在连接地址里填入API的地址其中feed_id换成你真实的FEED_ID&lt;/p&gt;&#xA;&#xA;&lt;p&gt;如：https://api.xively.com/v2/feeds/80400859?timezone=+8&lt;/p&gt;&#xA;&#xA;&lt;p&gt;启用HEADERS 添加一个X-ApiKey 的KEY VALUE就是你的APPKEY.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;BODY 处填写需要发送的JSON数据，方式选择PUT&lt;/p&gt;&#xA;&#xA;&lt;p&gt;点击发送即可，RESPONSE 处会显示200表示y成功 。如下图：&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;http://cdntest.aliyun.com/faxianla/wood/mt1366633121092.png&#34; width=&#34;600&#34; height=&#34;600&#34;/&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;这个时候访问下 &lt;a href=&#34;https://xively.com/feeds/80400859&#34;&gt;https://xively.com/feeds/80400859&lt;/a&gt; 这个地址就可以看到刚才PUT过去的数据就OK了代表你的API已经调试OK.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;http://cdntest.aliyun.com/faxianla/wood/mt1368625828856.png&#34; width=&#34;600&#34; height=&#34;600&#34;/&gt;&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;准备SHELL打点脚本&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;1.cpuLoad 数据收集&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;cat /proc/loadavg | awk &#39;{print $2}&#39;`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;2.CPU温度 数据收集&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;cat /sys/class/thermal/thermal_zone0/temp | awk &#39;{print $1/1000}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;通过以上2条命令就可以查看当前的CPU对应的LOADE和温度，下面就需要将收集到的数据组装成cosm的API需要的JSON格式在PUT给cosm就可以了。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;下面是脚本的例子：&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#!/bin/bash&#xA;&#xA;LOCATION=&#39;/home/pi/sysdata&#39;   #生成JSON文件路径,替换成你的路径&#xA;API_KEY=&#39;l9eHDf_fLzQx9Qfc8hCVrIan9DOSAKxrN21EOTdyL1IxST0g&#39; #API使用的KEY,替换成你的KEY&#xA;FEED_ID=&#39;126908&#39; #提交数据的FEED,替换成你的FEED_ID&#xA;####################################################&#xA;&#xA;COSM_URL=https://api.xively.com/v2/feeds/${FEED_ID}?timezone=+8&#xA;cpu_load=`cat /proc/loadavg | awk &#39;{print $2}&#39;`&#xA;&#xA;for i in 1 2 3 4 5; do&#xA;        cpu_t=`cat /sys/class/thermal/thermal_zone0/temp | awk &#39;{print $1/1000}&#39;`&#xA;        if [[ &amp;quot;${cpu_t}&amp;quot; =~ ^- ]]&#xA;        then&#xA;                cpu_t=&#39;0.0&#39;&#xA;        else&#xA;                echo ${cpu_t}&#xA;                break&#xA;        fi&#xA;done&#xA;&#xA;STR=`awk &#39;BEGIN{printf &amp;quot;{\&amp;quot;datastreams\&amp;quot;:[ {\&amp;quot;id\&amp;quot;:\&amp;quot;load\&amp;quot;,\&amp;quot;current_value\&amp;quot;:\&amp;quot;%.2f\&amp;quot;}, {\&amp;quot;id\&amp;quot;:\&amp;quot;temp\&amp;quot;,\&amp;quot;current_value\&amp;quot;:\&amp;quot;%.2f\&amp;quot;}] } &amp;quot;,&#39;$cpu_load&#39;,&#39;$cpu_t&#39;}&#39;`&#xA;&#xA;echo ${cpu_t}&#xA;echo ${cpu_load}&#xA;echo ${STR}&#xA;echo ${STR} &amp;gt; ${LOCATION}/cosm.json&#xA;curl -s -v --request PUT --header &amp;quot;X-ApiKey: ${API_KEY}&amp;quot; --data-binary @${LOCATION}/cosm.json ${COSM_URL}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;修改脚本中需要替换成你自己的三个变量LOCATION，API_KEY，FEED_ID 之后 赋予改脚本文件 755权限并且运行。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;例如：该脚本名称testSys.sh&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;chmod 755 testSys.sh&#xA;./testSys.sh&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;可以看到以下结果:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;http://cdntest.aliyun.com/faxianla/wood/mt1366706378183.png&#34; width=&#34;600&#34; height=&#34;600&#34;/&gt;&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;将打点脚本添加到CRONTAB中&lt;/h1&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;crontab -e&#xA;&#xA;1 * * * * /home/pi/sysdata/testSys.sh&amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp; #每一分钟运行一次/home/pi/sysdata/testSys.sh&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h1&gt;页面引入图表&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;在需要暂时图表的地方加入以下代码：&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;img src=&amp;quot;https://api.xively.com/v2/feeds/${FEED_ID}/datastreams/${LINE_ID}.png?width=340&amp;amp;height=180&amp;amp;colour=%23f15a24&amp;amp;duration=2days&amp;amp;title=${TITLE}&amp;amp;show_axis_labels=false&amp;amp;detailed_grid=true&amp;amp;scale=&amp;amp;timezone=8&amp;quot;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;${FEED_ID}:替换成你创建FEED的ID，上个例子中就是126908&lt;/p&gt;&#xA;&#xA;&lt;p&gt;${LINE_ID}:替换成你FEED里具体LINE的ID，上个例子中就是load或者temp&lt;/p&gt;&#xA;&#xA;&lt;p&gt;${TITLE}  :图表展示上的标题,可以自己按照需要命名，比如CPU的LOAD&lt;/p&gt;&#xA;&#xA;&lt;p&gt;经过以上步骤就可以将你的PI上的CPU的LOAD还有温度数据采集到放到cosm展示，其他原理类似如统计在线人数等需求都可以用这个xively的服务来实现。&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>利用GOR在Raspberry Pi上搭建博客</title>
      <link>http://dqy.me/2013/pi-gor.html</link>
      <pubDate>2013-04-11 12:00:00 +0800</pubDate>
      <description>&lt;h1&gt;前言&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;Pi入手后就想在上面搭建一个博客，之前首先想到的是一些现成的解决方案如Wordpress，rubyonrails等等，但是随着入手后的一些折腾,发现Pi的CPU&#xA;的性能真的不咋地，如果让本来就弱的CPU再负责渲染动态页面的话，结果可想而知。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;所以思路就需要转变一下，如果是HTML的静态页面的话，一些耗费资源的功能，如图床，评论等，都以云服务的方式放到公网上，那么以Pi的硬件配置应该问题不大。&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;为什么选择GOR&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;经过上面的分析，Pi上搭建博客首选是静态页面方案，但是纯HTML搭建起来的话将是个费时费力的活。有没有更好的方案呢，参考了&lt;a href=&#34;http://hugozhu.myalert.info&#34;&gt;一粟&lt;/a&gt;的GO+GOR&#xA;方案，我觉得这个是我想要的东东。&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;安装GOR&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;gor 是使用golang实现的类Ruhoh静态博客引擎(Ruhoh like),基本兼容ruhoh 1.x规范. 相当于与ruhoh的官方实现(ruby实现)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;有以下优点:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;速度完胜 – 编译wendal.net近200篇博客,仅需要1秒&lt;/p&gt;&#xA;&#xA;&lt;p&gt;安装简单 – 得益于golang的特性,编译后仅一个可运行程序,无依赖&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;安装Golang(&lt;a href=&#34;http://golang.org&#34;&gt;Golang官网&lt;/a&gt;)&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;1.安装Mercurial(GOOGLE惯用mercurial做版本管理)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install mercurial&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;2.检出GO的代码，注意Pi是ARM平台不能用主干的代码，需要用TIP分支&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;hg clone -u tip https://code.google.com/p/go&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;一顿漫长等待，可以看到PI的CPU很高，如果实在不行可以在PC机器上HG出来源码，FTP发到Pi上。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;3.编译源码并且安装&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;cd go/src (进入源码目录)&#xA;./all.bash (运行编译安装脚本)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;整个编译安装过程会很漫长，要所有TEST都通过后GO才算安装成功。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;注意：如果安装报错，尝试用TIP分支的其他版本，之前就遇到了这个坑，最新的TIP是无法编译通过的（看来GOOGLE的程序员也会缺少自测就提交代码）。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;附HG回滚：&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;hg revert -r 15749:e92503ce815b --all (我是使用15749:e92503ce815b 这个版本没问题)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h1&gt;安装GOR（&lt;a href=&#34;https://github.com/wendal/gor&#34;&gt;Gor官网&lt;/a&gt;）&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;1.用go安装gor&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;go get -u github.com/wendal/gor&#xA;go install github.com/wendal/gor/gor&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;2.设置GOPATH&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;GOPATH=/home/pi/mygo （仅供参考 mygo是我建立的一个目录专门放GO的工程）&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h1&gt;建立BLOG站点&lt;/h1&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;gor new blog (会在指定的命令目录下生成BLOG的站点目录)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h1&gt;创建博客文章&lt;/h1&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;cd blog&#xA;gor post &amp;quot;goodday&amp;quot; (即可生成 post/goodday.md文件, 打开你的markdown编辑器即可编写)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h1&gt;编译博客&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;在blog站点目录下执行&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;gor compile&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;这样会在你的blog站点目录下生成compiled目录，里面的内容就是编译后的静态文件&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;本地预览&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;在blog站点目录下执行&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;gor http&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;浏览器输入http://xxxx:8080 （xxx为你PI的IP）,就可以看到结果&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;GOR站点的基本配置&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;*打开站点根目录下的site.yml文件&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;1.填入title, 作者等信息&#xA;2.填入邮箱等信息&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;*打开站点根目录下的config.yml文件&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;1.设置production_url为你的网站地址, 例如 http://wendal.net 最后面不需要加入/ 生成rss.xml等文件时会用到&#xA;2.summary_lines 首页的文章摘要的长度,按你喜欢的呗&#xA;3.latest 首页显示多少文章&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;*打开widgets目录, 可以看到基本的挂件,里面有config.yml配置文件&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;1.analytics 暂时只支持google analytics, 填入tracking_id（可不填）&#xA;2.google_prettify 代码高亮,一般不修改&#xA;3.comments 暂时只支持disqus, 请填入short_name&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;注意：comments需要到 &lt;a href=&#34;http://disqus.com&#34;&gt;disqus&lt;/a&gt; 注册个账号，然后申请个short_name，这样GOR就会为你的博客集成disqus的&#xA;评论功能。&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;安装nginx&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;gor http 命令只能提供开发调试功能，对于server side include这样类似于显示客户端IP等功能就无能为力了，所以要用nginx&lt;/p&gt;&#xA;&#xA;&lt;p&gt;安装：&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install nginx&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;添加虚拟主机&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;sudo vi /etc/nginx/sites-enabled/default&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;添加内容&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;server {&#xA;    server_name dqy.me;&#xA;    root /home/pi/blog/compiled; #站点编译静态文件所在目录&#xA;    location / {&#xA;        ssi on;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;这样只要在页面上增加以下代码，就可以显示客户端IP了&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;!--# echo var=&amp;quot;remote_addr&amp;quot; default=&amp;quot;no&amp;quot; --&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h1&gt;重启Nginx&lt;/h1&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;sudo /etc/init.d/nginx restart&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h1&gt;参考：&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;http://hugozhu.myalert.info/2013/02/27/%E5%9C%A8Pi%E5%92%8CGithub%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html&#34;&gt;在Pi和Github上搭建自己的个人博客&lt;/a&gt;&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>Raspberry Pi 配置VNC</title>
      <link>http://dqy.me/2013/pi-vnc.html</link>
      <pubDate>2013-04-08 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;今天一个同事问我是否能远程访问RaspberryPi的桌面环境，当时一口回答VNC，至于咋搞一直没尝试过，因为我一直认为Raspberry Pi上搞X的话，性能真&#xA;是惨不忍睹。但是本着探索的精神今天还是尝试了下顺便记录了下过程。&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;安装 tightvncserver&lt;/h1&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install tightvncserver&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h1&gt;启动VNC Server&lt;/h1&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;vncserver&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;设定访问密码,会出现两次，之后会询问一个只读密码，n跳过&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;客户端连接&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;http://www.tightvnc.com/logo/tightvnc-logo-90x90.png&#34; alt=&#34;&#34; /&gt;&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;tightvnc的客户端有很多平台的，可以根据需要下载 &lt;a href=&#34;http://www.tightvnc.com/download.php&#34;&gt;下载连接&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;安装好客户端后，输入要连接RaspberryPi的地址以及端口(默认端口是5901) 就可以连接了&lt;/p&gt;&#xA;&#xA;&lt;p&gt;当然你也可以让RaspberryPi上的VNC的SERVER默认启动，那么可以参考以下方法。&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;设定开机启动(如果你愿意)&lt;/h1&gt;&#xA;&#xA;&lt;h2&gt;准备开机启动脚本&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;sudo vi /etc/init.d/tightvncserver&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;*下面是脚本内容&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#!/bin/sh&#xA;&#xA;### BEGIN INIT INFO&#xA;# Provides:             tightvnc&#xA;# Required-Start:       $remote_fs $syslog&#xA;# Required-Stop:        $remote_fs $syslog&#xA;# Default-Start:        2 3 4 5&#xA;# Default-Stop:         0 1 6&#xA;# Short-Description:    Start VNC Server as a service&#xA;### END INIT INFO&#xA;&#xA;VNCUSER=&#39;pi&#39;&#xA;eval cd ~${VNCUSER}&#xA;&#xA;case &amp;quot;$1&amp;quot; in&#xA;    start)&#xA;        su ${VNCUSER} -c &#39;/usr/bin/tightvncserver :1&#39;&#xA;        echo &amp;quot;Starting TightVNC server for ${VNCUSER}&amp;quot;&#xA;        ;;&#xA;    stop)&#xA;        pkill Xtightvnc&#xA;        echo &amp;quot;Tightvncserver stopped&amp;quot;&#xA;        ;;&#xA;    *)&#xA;        echo &amp;quot;Usage: /etc/init.d/tightvncserver {start|stop}&amp;quot;&#xA;        exit 1&#xA;        ;;&#xA;esac&#xA;&#xA;exit 0&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;修改启动脚本权限&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;sudo chmod 755 /etc/init.d/tightvncserver&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;添加到开机启动&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;sudo update-rc.d tightvncserver defaults&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h1&gt;XDRP&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;如果感兴趣可以安装XDRP，这个玩意也依赖VNC。好处是可以直接使用WIN的远程桌面连接，而速度快。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;安装命令：&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install xrdp&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;注意：默认端口3389 如果是外网需要自己路由器映射暴漏这个端口。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;WINDOWS 下远程桌面&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;http://cdntest.aliyun.com/faxianla/wood/m939474-1366612952465.png&#34; alt=&#34;WIN远程桌面&#34; /&gt;&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;http://cdntest.aliyun.com/faxianla/wood/m939475-1366612965244.png&#34; alt=&#34;登录成功&#34; /&gt;&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;输入你的用户名密码即可连接&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>Raspberry Pi 开机与设置</title>
      <link>http://dqy.me/2013/pi-setup.html</link>
      <pubDate>2013-04-06 12:00:00 +0800</pubDate>
      <description>&lt;h1&gt;硬件需求&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;1.Pi主机一个&lt;/p&gt;&#xA;&#xA;&lt;p&gt;2.Pi支持的SD卡或者TF卡+SD卡套&#xA;（Pi对于SD卡是有要求的，某些品牌和型号的SD卡无法引导）&lt;br/&gt;&#xA;详见：&lt;a href=&#34;http://pan.baidu.com/share/link?shareid=173551&amp;amp;uk=1529595879&#34;&gt;SD卡支持列表&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;3.USB键盘和鼠标&lt;/p&gt;&#xA;&#xA;&lt;p&gt;4.支持视频或者HDMI的显示器或者电视机 (安装好系统配置后就没什么用，除非你用Pi做桌面工作环境)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;5.5V 500mh的Micro USB充电器一个&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;启动SD卡制作&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;Pi使用的SD卡可以看做是它的硬盘，系统是是安装到SD卡上的。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;1.到&lt;a href=&#34;http://www.raspberrypi.org/downloads&#34;&gt;www.raspberrypi.org&lt;/a&gt;下载系统镜像&#xA;可选择的系统镜像有Raspbian，Arch Linux ARM RISC OS等，经过网友测试Raspbian “wheezy”&#xA;貌似现在性能比较好。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;2.利用PC将下载解压后的img文件写入到SD卡中，不同的PC平台写入方法不同&lt;br/&gt;&#xA;MAC为例：利用DD工具&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;插入卡 Raspberry Pi 使用手册 在终端窗口中输入”df –h”您会发现多了 一个“/dev/disk1s1”的设备&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;卸载卡 终端窗口输入“sudo diskutil unmount /dev/disk1s1”,然后输入您的系统密码&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;设备名称变换 将您的设备名(例 如/dev/disk1s1)最后的 s1 去掉,然后在 disk 前面加上 r,变成” /dev/rdisk1”,&#xA;这样您就得到 SD 卡的原始设备名称了。 也就是说,”/dev/disk1s1” = “/dev/rdisk1”&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;用DD命令写入 sudo dd bs=1m if=2013-02-09-wheezy-raspbian.img of=/dev/rdisk1&#xA;或者用RPi-sd card builder 这个APP写入 &lt;a href=&#34;http://alltheware.wordpress.com/2012/12/11/easiest-way-sd-card-setup/&#34;&gt;下载连接&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;其他平台SD卡制作方法详见：&lt;a href=&#34;http://pan.baidu.com/share/link?shareid=173464&amp;amp;uk=1529595879&#34;&gt;Raspberry Pi中文手册&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;连接设备&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;按照以下图片接口位置连接设备（USB键盘，鼠标，SD卡，网线，电视机或者显示器）&#xA;&lt;img src=&#34;http://files.leiphone.com/uploads/2012/08/raspberry-pi-3-1024x680.jpg&#34; width=&#34;600&#34; height=&#34;600&#34;/&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;HDMI支持开启，这个坑害我折腾半天，因为 Raspbian对于HDMI默认没有启用。如果你使用的是HDMI连接显示设备就要多一个步骤。&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;开启HDMI，修改SD开中的config.txt文件里的参数，hdmi_safe的设置改成1&lt;/p&gt;&#xA;&#xA;&lt;p&gt;hdmi_safe=1&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;设别连接好就可以开机了，如果没什么问题开机后显示器上会显示Raspberry Pi的设置页面&#xA;&lt;img src=&#34;http://files.leiphone.com/uploads/2012/08/firstscreen.png&#34; width=&#34;600&#34; height=&#34;600&#34;/&gt;&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;info 顾名思义，显示PI的一些配置信息&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;expand_rootfs 将SD卡系统的根目录扩展到整个SD卡，因为镜像只有2G左右，如果使用2G以上的SD卡，如果不使用&#xA;该工具就会显示整个SD卡的容量只有2G&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;overscan 图像显示扩充，如果你的显示器图像无法扩展到整个屏幕，整个选项需要开启图像就会拉伸到显示器满屏&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;configure_keyboard 键盘配置，树莓派默认使用英国键盘，我们的键盘一般是美国布局的。所以要在Other，然后在里面选择English（US）&#xA;到了：Use Control+Alt+Backspace to terminate the X server? 时，选择Yes，表示用这个可以终止X Server，当整个X-Window死掉的时候可以用。&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;change_pass 更改用户密码，默认用户为pi无法修改，密码为raspberry 所以这里为了安全还是修改成自己的密码&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;change_timezone 设置时区，因为LINUX莫有北京时区所以就选择Asia – Shanghai吧&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;change_locale 设置编码，建议安装zh_CN.UTF-8,还有en_us.GBK-UTF-8这两个，默认设置en_us.GBK-UTF-8&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;memory_split 内存分配，这里可以将内存划分给显存，如果跑图形或者高清播放这里要设置128M，如果纯文字的SERVER这里设置成最小即可。&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;ssh 时候激活ssh，一般当图形页面出现问题时候，可以通过SSH登录过去进行修复，整个还是开这吧。&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;boot_behaviour 启动的时候时候默认进入图形界面，不使用图形建议关闭，这很损耗性能。&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;设置完成后，选择Finish，会提示是否重启，选择Yes。重启后即可进入图形页面。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;http://ww1.sinaimg.cn/bmiddle/45895cd5jw1e386e16uw5j.jpg&#34; alt=&#34;&#34; /&gt;&#xA;&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;设置临时IP(如果您的网络是自动获取 IP 地址的话,此时已经能够上网了,如果不行在进行这步骤设置)&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;需要先设置个临时性的网络配置，主要为了之后安装VIM编辑器，修改系统文件就是持久配置了&lt;/p&gt;&#xA;&#xA;&lt;p&gt;ifconfig eth0 xxx.xxx.xxx.xxx netmask 255.255.255.0&lt;/p&gt;&#xA;&#xA;&lt;p&gt;route add default gw yyy.yyy.yyy.yyy&lt;/p&gt;&#xA;&#xA;&lt;p&gt;ifconfig eth0 up&lt;/p&gt;&#xA;&#xA;&lt;p&gt;注意： xxx.xxx.xxx.xxx yyy.yyy.yyy.yyy为你所在环境的IP以及网关&lt;/p&gt;&#xA;&#xA;&lt;p&gt;如果配置没问题，可以ping www.taobao.com就可以PING通&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;更新APT的源列表&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;apt-get update&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;安装VIM&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;apt-get install vim&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;配置持久IP&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;vim /etc/network/interfaces&lt;/p&gt;&#xA;&#xA;&lt;p&gt;去掉 inface eth0 inet dhcp 动态DHCP的配置修改成以下&lt;/p&gt;&#xA;&#xA;&lt;p&gt;inface eth0 inet static&lt;/p&gt;&#xA;&#xA;&lt;p&gt;address xxx.xxx.xxx.xxx&lt;/p&gt;&#xA;&#xA;&lt;p&gt;gateway yyy.yyy.yyy.yyy&lt;/p&gt;&#xA;&#xA;&lt;p&gt;netmask 255.255.255.0&lt;/p&gt;&#xA;&#xA;&lt;p&gt;注意： xxx.xxx.xxx.xxx yyy.yyy.yyy.yyy为你所在环境的IP以及网关&lt;/p&gt;&#xA;&#xA;&lt;p&gt;保存退出&lt;/p&gt;&#xA;&#xA;&lt;p&gt;重启网络&lt;/p&gt;&#xA;&#xA;&lt;p&gt;sudo service networking restart&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;更换了一个更加快速的源：&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;pi的源列表: &lt;a href=&#34;http://www.raspbian.org/RaspbianMirrors&#34;&gt;http://www.raspbian.org/RaspbianMirrors&lt;/a&gt;&#xA;测试了之后发现这个源在国内更新最快&#xA;&lt;a href=&#34;http://mirror.devunt.kr/raspbian/raspbian/&#34;&gt;http://mirror.devunt.kr/raspbian/raspbian/&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;更换源:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;sudo vi /etc/apt/sources.list&lt;/p&gt;&#xA;&#xA;&lt;p&gt;更换为以下代码：&lt;/p&gt;&#xA;&#xA;&lt;p&gt;deb &lt;a href=&#34;http://mirror.devunt.kr/raspbian/raspbian/&#34;&gt;http://mirror.devunt.kr/raspbian/raspbian/&lt;/a&gt; wheezy main contrib non-free rpi&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.raspbian.org/RaspbianMirrors&#34;&gt;更多APT源列表&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;图形界面下安装中文支持还有输入发&lt;/p&gt;&#xA;&#xA;&lt;p&gt;-安装文泉字体&#xA;sudo apt-get install ttf-wqy-zenhei&lt;/p&gt;&#xA;&#xA;&lt;p&gt;-安装拼音输入发&#xA;sudo apt-get install scim-pinyin&lt;/p&gt;&#xA;&#xA;&lt;p&gt;-修改默认系统编码为zh_CN.UTF-8&#xA;sudo raspi-config&lt;/p&gt;&#xA;&#xA;&lt;p&gt;然后选择change_locale，在Default locale for the system environment:中选择zh_CN.UTF-8&lt;/p&gt;&#xA;&#xA;&lt;p&gt;然后重启机器，就发现整个环境变成中文的了。&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;开启FTP&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;安装vsftpd服务器 (约400KB)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;sudo apt-get install vsftpd&lt;/p&gt;&#xA;&#xA;&lt;p&gt;启动ftp服务&lt;/p&gt;&#xA;&#xA;&lt;p&gt;sudo service vsftpd start&lt;/p&gt;&#xA;&#xA;&lt;p&gt;编辑vsftdp的配置文件&lt;/p&gt;&#xA;&#xA;&lt;p&gt;sudo vi /etc/vsftpd.conf&lt;/p&gt;&#xA;&#xA;&lt;p&gt;找到以下行，修改成以下形式，如果有注释放开注释的#号即可&lt;/p&gt;&#xA;&#xA;&lt;p&gt;anonymous_enable=NO&lt;/p&gt;&#xA;&#xA;&lt;p&gt;表示：不允许匿名访问&lt;/p&gt;&#xA;&#xA;&lt;p&gt;local_enable=YES&lt;/p&gt;&#xA;&#xA;&lt;p&gt;设定本地用户可以访问。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;write_enable=YES&lt;/p&gt;&#xA;&#xA;&lt;p&gt;设定可以进行写操作&lt;/p&gt;&#xA;&#xA;&lt;p&gt;local_umask=022&lt;/p&gt;&#xA;&#xA;&lt;p&gt;设定上传后文件的权限掩码。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;存盘退出&lt;/p&gt;&#xA;&#xA;&lt;p&gt;重启vsftpd服务&lt;/p&gt;&#xA;&#xA;&lt;p&gt;sudo service vsftpd restart&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;系统测试&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;如果对于你的Raspberry Pi的具体性能感兴趣的话，可以给你的Raspberry Pi做个系统测评。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;我们用的是UnixBench 这个工具&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;curl http://byte-unixbench.googlecode.com/files/unixbench-5.1.2.tar.gz -o unixbench-5.1.2.tar.gz&#xA;tar zxvf unixbench-5.1.2.tar.gz&#xA;cd unixbench-5.1.2&#xA;make&#xA;./Run&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;注意:如果没有图形的话，要在Makefile里注释掉X的测试&lt;/p&gt;&#xA;&#xA;&lt;p&gt;#GRAPHIC_TESTS = defined&lt;/p&gt;&#xA;&#xA;&lt;p&gt;测试结果&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;========================================================================&#xA;   BYTE UNIX Benchmarks (Version 5.1.2)&#xA;&#xA;   System: raspberrypi: GNU/Linux&#xA;   OS: GNU/Linux -- 3.6.11+ -- #371 PREEMPT Thu Feb 7 16:31:35 GMT 2013&#xA;   Machine: armv6l (unknown)&#xA;   Language: en_US.utf8 (charmap=&amp;quot;ANSI_X3.4-1968&amp;quot;, collate=&amp;quot;ANSI_X3.4-1968&amp;quot;)&#xA;   15:31:42 up 51 min,  2 users,  load average: 0.32, 0.33, 0.41; runlevel 2&#xA;&#xA;------------------------------------------------------------------------&#xA;Benchmark Run: Mon Apr 01 2013 15:31:42 - 15:59:52&#xA;0 CPUs in system; running 1 parallel copy of tests&#xA;&#xA;Dhrystone 2 using register variables        1667613.1 lps   (10.0 s, 7 samples)&#xA;Double-Precision Whetstone                      270.4 MWIPS (10.0 s, 7 samples)&#xA;Execl Throughput                                256.0 lps   (29.9 s, 2 samples)&#xA;File Copy 1024 bufsize 2000 maxblocks         45717.2&#xA; KBps  (30.1 s, 2 samples)&#xA;File Copy 256 bufsize 500 maxblocks           14782.9 KBps  (30.0 s, 2 samples)&#xA;File Copy 4096 bufsize 8000 maxblocks        104151.9 KBps  (30.0 s, 2 samples)&#xA;Pipe Throughput                              185870.4 lps   (10.0 s, 7 samples)&#xA;Pipe-based Context Switching                  24193.6 lps   (10.0 s, 7 samples)&#xA;Process Creation                                831.9 lps   (30.0 s, 2 samples)&#xA;Shell Scripts (1 concurrent)                    469.8 lpm   (60.1 s, 2 samples)&#xA;Shell Scripts (8 concurrent)                     60.0 lpm   (61.0 s, 2 samples)&#xA;System Call Overhead                         377382.3 lps   (10.0 s, 7 samples)&#xA;&#xA;System Benchmarks Index Values               BASELINE       RESULT    INDEX&#xA;Dhrystone 2 using register variables         116700.0    1667613.1    142.9&#xA;Double-Precision Whetstone                       55.0&#xA;        270.4     49.2&#xA;Execl Throughput                                 43.0        256.0     59.5&#xA;File Copy 1024 bufsize 2000 maxblocks          3960.0      45717.2    115.4&#xA;File Copy 256 bufsize 500 maxblocks            1655.0      14782.9     89.3&#xA;File Copy 4096 bufsize 8000 maxblocks          5800.0     104151.9    179.6&#xA;Pipe Throughput                               12440.0     185870.4    149.4&#xA;Pipe-based Context Switching                   4000.0      24193.6     60.5&#xA;Process Creation                                126.0        831.9     66.0&#xA;Shell Scripts (1 concurrent)                     42.4        469.8    110.8&#xA;Shell Scripts (8 concurrent)                      6.0         60.0    100.0&#xA;System Call Overhead                          15000.0     377382.3    251.6&#xA;                                                                   ========&#xA;System Benchmarks Index Score                                         102.1&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h1&gt;到此为止，你的Raspberry Pi 已经具备了Linux系统以及独立的IP,可以SSH过去，FTP传文件，剩下的自己折腾吧。&lt;/h1&gt;&#xA;</description>
    </item>
    <item>
      <title>初试Raspberry Pi</title>
      <link>http://dqy.me/2013/pi-frist.html</link>
      <pubDate>2013-04-06 12:00:00 +0800</pubDate>
      <description>&lt;h2&gt;什么是Raspberry Pi（树梅派）&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Raspberry Pi是一款基于Linux系统的个人电脑，配备一枚700MHz的处理器，512内存，支持SD卡和Ethernet，拥有两个USB接口，&#xA;以及 HDMI和RCA输出支持。。。。。太多了具体还是直接&lt;a href=&#34;http://baike.baidu.com/view/5730914.htm&#34;&gt;百科&lt;/a&gt;吧。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;http://www.ickey.cn/images/raspberry/ras14.jpg&#34; width=&#34;600&#34; height=&#34;600&#34;/&gt;&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;UK与China版本的区别(当初购买的时候，我也迷惑了一阵)&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Raspberry Pi 目前分UK版本还有China版本，两者的区别如下：&#xA;&lt;table class=&#34;table table-bordered table-striped table-condensed&#34;&gt;&#xA;    &lt;tr&gt;&#xA;        &lt;td&gt;版本&lt;/td&gt;&#xA;        &lt;td&gt;电路板&lt;/td&gt;&#xA;        &lt;td&gt;内存&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;     &lt;tr&gt;&#xA;         &lt;td&gt;UK&lt;/td&gt;&#xA;         &lt;td&gt;绿色&lt;/td&gt;&#xA;         &lt;td&gt;三星&lt;/td&gt;&#xA;     &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;China&lt;/td&gt;&#xA;          &lt;td&gt;红色&lt;/td&gt;&#xA;          &lt;td&gt;现代&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;&lt;/table&gt;&#xA;其实两个版本最重要的不同点就是内存，至于是该选三星的还是选现代的内存大家心里应该有数吧。另外Raspberry Pi的系统之前对于China版本的现代&#xA;内存兼容有些问题需要手工打补丁，不过目前最新的Raspberry Pi的系统对于China版本的现代内存都已经兼容了。&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Raspberry Pi的购买&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;购买途径有很多，淘宝商城以及XXX渠道，由于淘宝商城里只卖国产的苦于自己的三星内存情节，所以选择了国内官方授权代理商ICkey购买了UK版本的&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;http://www.ickey.cn/uploads/data_ickey/3D2868243A90F067F7E938C586D273D7.jpg&#34; alt=&#34; &#34; /&gt;&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.ickey.cn/groupbuy.php?ick_sno=ICKEY00033&#34;&gt;直达IC-KEY 购买连接&lt;/a&gt;（这个套餐算下也很划算，就是快递顺丰 22元有点小贵，建议多个同学一起买）&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;为什么需要散热片&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;先看下Raspberry Pi的三大散热部分的分布&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;http://ww4.sinaimg.cn/mw600/53e51344jw1dwqa06p3yej.jpg&#34; alt=&#34;Raspberry Pi 发热部分&#34; /&gt;&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;这些发热部分有些温度会高达60度，所以加装散热片还是有必要的。&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Raspberry Pi 开箱照&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;经过2天的等待，终于收到了IC-KEY发过来的Raspberry Pi 先上个PP秀下开箱照以及拼装好的靓照。&#xA;&lt;img src=&#34;http://ww4.sinaimg.cn/bmiddle/45895cd5jw1e381wpva05j.jpg&#34; alt=&#34;开箱照&#34; /&gt;&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;这里给大家提个醒，亚克力的外壳看起来漂亮，但是实际上很脆弱尤其是卡脚处，安装的时候一定要小心，切勿暴力安装。附上安装图&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;http://img03.taobaocdn.com/imgextra/i3/839475955/T2sRbbXX8bXXXXXXXX_!!839475955.png&#34; alt=&#34;&#34; /&gt;&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;组装工作完成后，剩下就是准备系统加电开机了，见下一篇博文 &lt;a href=&#34;/2013/pi-setup.html&#34;&gt;Raspberry Pi 开机与设置&lt;/a&gt;。&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>你的第一篇博客</title>
      <link>http://dqy.me/2013/new-born.html</link>
      <pubDate>2013-04-02 12:00:00 +0800</pubDate>
      <description>&lt;h1&gt;感谢你使用Gor编写博客&lt;/h1&gt;&#xA;&#xA;&lt;h2&gt;本文位于 posts/first-blog.md , 你可以任何删掉,修改这个文件&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;文件开头是当前文章的元数据&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;date为自动生成, 当然,你可以修改,这是你的自由&lt;/li&gt;&#xA;&lt;li&gt;permalink 可以是固定地址,也可以由gor为你自动生成&lt;/li&gt;&#xA;&lt;li&gt;categories 就是分类, 可以多个&lt;/li&gt;&#xA;&lt;li&gt;tags 同理,多个标签也是很常见的&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;请确保文件使用UTF8 without BOM编码&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;你可以通过执行下面的语句来新建一篇博客:&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;gor post 文章标题&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;编译你的博客,并预览之&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;gor compile #编译&#xA;gor http&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;然后打开你的浏览器,访问 &lt;a href=&#34;http://127.0.0.1:8080&#34;&gt;http://127.0.0.1:8080&lt;/a&gt; 来预览&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;你将使用Markdown来编写博客&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;http://wowubuntu.com/markdown/&#34;&gt;Markdown 语法中文版&lt;/a&gt; 能让你快速入门其语法&lt;/p&gt;&#xA;&#xA;&lt;p&gt;相信&lt;a href=&#34;http://markdownpad.com&#34;&gt;MarkdownPad&lt;/a&gt;或&lt;a href=&#34;http://code.google.com/p/liteide/&#34;&gt;liteide&lt;/a&gt;会是你的编写博客的好帮手&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;如果你打算部署到github的pages上&lt;/h2&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;申请github帐户&lt;/li&gt;&#xA;&lt;li&gt;新建一个库 username.github.com 即你的用户名命名的地址&lt;/li&gt;&#xA;&lt;li&gt;将compiled目录,作为根路径,提交上去github.com上&lt;/li&gt;&#xA;&lt;li&gt;稍等几分钟, 你即可通过 &lt;a href=&#34;http://username.github.com&#34;&gt;http://username.github.com&lt;/a&gt; 访问到&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;h2&gt;附上git教程 &lt;a href=&#34;http://gitbook.liuhui998.com/&#34;&gt;GitBook中文版&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;一般来说,你只需要几个简单的git命令就足以应付大部分需求(仅示例)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;git clone git://github.com/wendal/wendal.net.git&#xA;git add -A&#xA;git commit -m &amp;quot;...&amp;quot;&#xA;git pull&#xA;git push&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;用gor编写博客将会是一件很开心的事,如果有任何意见或建议,欢迎到 &lt;a href=&#34;http://github.com/wendal/gor&#34;&gt;gor的官网&lt;/a&gt; 提交issue&lt;/h2&gt;&#xA;&#xA;&lt;h1&gt;祝你使用愉快&lt;/h1&gt;&#xA;</description>
    </item>
  </channel>
</rss>